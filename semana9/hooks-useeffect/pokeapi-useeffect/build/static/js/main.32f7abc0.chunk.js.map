{"version":3,"sources":["components/PokeCard/PokeCard.js","App.js","index.js"],"names":["PokeCard","props","useState","pokemon","setPokemon","useEffect","pegaPokemon","pokeName","axios","get","then","response","data","catch","err","console","log","pokemonNaTela","name","weight","types","type","sprites","src","front_default","alt","App","pokeList","setPokeList","setPokeName","results","className","onChange","event","target","value","map","key","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"iQAuDeA,MApDf,SAAkBC,GAAQ,IAAD,EAEOC,mBAAS,IAFhB,mBAEhBC,EAFgB,KAEPC,EAFO,KAKvBC,qBAAU,WACRC,EAAYL,EAAME,WAEjB,IAKHE,qBAAU,WAKRC,EAAYL,EAAME,WAEjB,CAACF,EAAME,UAMV,IAAMG,EAAc,SAAAC,GAClBC,IACGC,IADH,4CAC4CF,IACzCG,MAAK,SAAAC,GAEJP,EAAWO,EAASC,SAErBC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OAIVG,EAAgBd,EAEtB,OACE,6BACE,2BAAIc,EAAcC,MAClB,2BAAID,EAAcE,OAAlB,OACCF,EAAcG,OAAS,2BAAIH,EAAcG,MAAM,GAAGC,KAAKH,MACvDD,EAAcK,SACb,yBAAKC,IAAKN,EAAcK,QAAQE,cAAeC,IAAKR,EAAcC,SCF7DQ,MA1Cf,SAAazB,GAAO,IAAD,EAEeC,mBAAS,IAFxB,mBAEVyB,EAFU,KAEAC,EAFA,OAGe1B,mBAAS,IAHxB,mBAGVK,EAHU,KAGAsB,EAHA,KAoBjB,OAdAxB,qBAAU,WAGNG,IAAMC,IAAI,gDAAgDC,MAAK,SAAAC,GAE7DiB,EAAYjB,EAASC,KAAKkB,YACzBjB,OAAM,SAAAC,GACPC,QAAQC,IAAIF,QAEf,IAMD,yBAAKiB,UAAU,OAGb,4BAAQC,SAPW,SAAAC,GACrBJ,EAAYI,EAAMC,OAAOC,SAOrB,4BAAQA,MAAO,IAAf,UAECR,EAASS,KAAI,SAAAjC,GACZ,OACE,4BAAQkC,IAAKlC,EAAQe,KAAMiB,MAAOhC,EAAQe,MACvCf,EAAQe,UAOhBX,GAAY,kBAAC,EAAD,CAAUJ,QAASI,MCrChC+B,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFL,K","file":"static/js/main.32f7abc0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction PokeCard(props) {\n\n  const [pokemon, setPokemon] = useState({})\n\n  // método que roda após a montagem do componente\n  useEffect(()=>{\n    pegaPokemon(props.pokemon);\n\n  }, []);\n\n  // método que roda após a atualização do componente.\n  // Um dos casos de atualização do componente é a\n  // mudança da props que está sendo passado pra ele\n  useEffect(()=> {\n    // aqui, é feita uma verificação da props anterior com a props atual.\n    // Caso a props anterior seja diferente da props atual,\n    // a função pegaPokemon é chamada.\n    \n    pegaPokemon(props.pokemon);\n    \n  }, [props.pokemon]);\n\n  // função que bate na poke API com um nome específico de pokemon\n  // Isso permite que consigamos pegar as infos dos pokemons.\n  // Nos métodos de ciclo de vida, ela é chamada passando como\n  // parâmetro o nome de pokemon que está chegando como props.\n  const pegaPokemon = pokeName => {\n    axios\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\n      .then(response => {\n        // guarda as infos do pokemon no estado\n        setPokemon(response.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n    const pokemonNaTela = pokemon;\n\n    return (\n      <div>\n        <p>{pokemonNaTela.name}</p>\n        <p>{pokemonNaTela.weight} Kg</p>\n        {pokemonNaTela.types && <p>{pokemonNaTela.types[0].type.name}</p>}\n        {pokemonNaTela.sprites && (\n          <img src={pokemonNaTela.sprites.front_default} alt={pokemonNaTela.name} />\n        )}\n      </div>\n    );\n}\n\nexport default PokeCard;\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport axios from \"axios\";\nimport PokeCard from \"./components/PokeCard/PokeCard\";\n\nfunction App(props){\n  \n  const [pokeList, setPokeList] = useState([])\n  const [pokeName, setPokeName] = useState(\"\")\n\n  // método que roda após a montagem do componente\n  useEffect(() => {\n    // função axios que está batendo na API e buscando 151 pokemons\n    \n      axios.get(\"https://pokeapi.co/api/v2/pokemon/?limit=151\").then(response => {\n        // função que está setando no estado os 151 pokemons\n        setPokeList(response.data.results);\n      }).catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  const changePokeName = event => {\n    setPokeName(event.target.value);\n  };\n  return (\n    <div className=\"App\">\n      {/* evento onChange chama função toda vez que o usuário \n      escolhe um novo pokemon no dropdown */}\n      <select onChange={changePokeName}>\n        <option value={\"\"}>Nenhum</option>\n        {/* renderizando a lista de pokemons como opções do select */}\n        {pokeList.map(pokemon => {\n          return (\n            <option key={pokemon.name} value={pokemon.name}>\n              {pokemon.name}\n            </option>\n          );\n        })}\n      </select>\n      {/* expressão booleana que renderiza o componente PokeCard,\n      caso o valor de pokeName, no estado, seja true */}\n      {pokeName && <PokeCard pokemon={pokeName} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}