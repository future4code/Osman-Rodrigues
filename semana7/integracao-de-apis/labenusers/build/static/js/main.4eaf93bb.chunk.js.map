{"version":3,"sources":["components/Login.js","components/UsersView.js","App.js","serviceWorker.js","index.js"],"names":["LoginSection","styled","section","LoginTitle","h2","LoginInput","input","LoginButton","button","Login","state","userName","userEmail","onChangeLoginInputUserName","e","setState","target","value","onChangeLoginInputKey","dataToSend","name","this","email","axios","post","headers","then","response","window","alert","catch","error","onChange","placeholder","onClick","props","onClickLogin","React","Component","UsersViewSection","UsersViewTitle","UserList","ul","User","li","UserRemove","span","LogoffButton","UsersView","token","usersList","onClickUserRemove","parentId","parentNode","id","delete","Authorization","get","data","map","user","key","onClickLogoff","AppContainer","main","App","loggedIn","onClickLog","dataFromParent","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"mrBAIA,IAAMA,EAAeC,IAAOC,QAAV,KAQZC,EAAaF,IAAOG,GAAV,KAGVC,EAAaJ,IAAOK,MAAV,KAGVC,EAAcN,IAAOO,OAAV,KA0DFC,E,4MApDXC,MAAM,CACFC,SAAU,GACVC,UAAW,I,EAkBfC,2BAA6B,SAACC,GAC1B,EAAKC,SAAS,CAACJ,SAAUG,EAAEE,OAAOC,S,EAEtCC,sBAAwB,SAACJ,GACrB,EAAKC,SAAS,CAACH,UAAWE,EAAEE,OAAOC,S,qEAjBnC,IAAME,EAAa,CAACC,KAAMC,KAAKX,MAAMC,SAAUW,MAAOD,KAAKX,MAAME,WAEjEW,IAAMC,KAAK,sEAAuEL,EAAW,CACzFM,QAAS,CACT,cAAgB,4BAEjBC,MAAK,SAACC,GACLC,OAAOC,MAAP,qBAAwBV,EAAWC,KAAnC,kBACDU,OAAM,SAACC,GACNH,OAAOC,MAAP,oCAA0CE,S,+BAa9C,OACI,kBAAC/B,EAAD,KACI,kBAACG,EAAD,cAEA,kBAACE,EAAD,CACA2B,SAAUX,KAAKR,2BACfI,MAAOI,KAAKX,MAAMC,SAClBsB,YAAa,uBAEb,kBAAC5B,EAAD,CAAY2B,SAAUX,KAAKH,sBAC3BD,MAAOI,KAAKX,MAAME,UAClBqB,YAAa,UAGb,kBAAC1B,EAAD,CACA2B,QAASb,KAAKc,MAAMC,cADpB,gC,GA7CIC,IAAMC,W,mqBClB1B,IAAMC,EAAmBtC,IAAOC,QAAV,KAOhBsC,EAAiBvC,IAAOG,GAAV,KAGdqC,EAAWxC,IAAOyC,GAAV,KAKRC,EAAO1C,IAAO2C,GAAV,KAGJC,EAAa5C,IAAO6C,KAAV,KAMVC,EAAe9C,IAAOO,OAAV,KA0EHwC,E,4MApEXtC,MAAM,CACFuC,MAAO,yBACPC,UAAW,I,EAiBfC,kBAAkB,SAACrC,GACf,IAAMsC,EAAWtC,EAAEE,OAAOqC,WAAWC,GAErC/B,IAAMgC,OAAN,8EAAoFH,GAAW,CAC3F3B,QAAQ,CACJ+B,cAAe,EAAK9C,MAAMuC,SAE/BvB,MAAK,SAACC,GACLJ,IAAMkC,IAAI,sEAAsE,CAChFhC,QAAQ,CACJ+B,cAAe,EAAK9C,MAAMuC,SAE3BvB,MAAK,SAACC,GACT,EAAKZ,SAAS,CAAEmC,UAAWvB,EAAS+B,OACpC9B,OAAOC,MAAP,uBACGC,OAAM,SAACC,GACNH,OAAOC,MAAP,kFAAsEE,UAE3ED,OAAM,SAACC,GACNH,OAAOC,MAAP,+CAA4CE,Q,kEAjChC,IAAD,OAEfR,IAAMkC,IAAI,sEAAsE,CAC5EhC,QAAQ,CACJ+B,cAAenC,KAAKX,MAAMuC,SAE3BvB,MAAK,SAACC,GACTC,OAAOC,MAAP,mBACA,EAAKd,SAAS,CAAEmC,UAAWvB,EAAS+B,UACjC5B,OAAM,SAACC,GACNH,OAAOC,MAAP,oDAAuDE,S,+BA2B1D,IAAD,OAEJ,OACI,kBAACQ,EAAD,KACI,kBAACC,EAAD,6BAEA,kBAACC,EAAD,KACKpB,KAAKX,MAAMwC,UAAUS,KAAI,SAAAC,GACtB,OACI,kBAACjB,EAAD,CACAkB,IAAKD,EAAKN,GACVA,GAAIM,EAAKN,IACPM,EAAKxC,KACP,kBAACyB,EAAD,CAAYS,GAAIM,EAAKN,GAAIpB,QAAS,EAAKiB,mBAAvC,gBAMZ,kBAACJ,EAAD,CAAcb,QAASb,KAAKc,MAAM2B,eAAlC,e,GA/DQzB,IAAMC,W,sUC1B9B,IAAMyB,EAAe9D,IAAO+D,KAAV,KA4CHC,E,4MA7BbvD,MAAM,CACJwD,UAAU,G,EAGZC,WAAa,WACX,EAAKpD,SAAS,CAAEmD,UAAY,EAAKxD,MAAMwD,Y,uDAKvC,OACE,kBAACH,EAAD,KAEE1C,KAAKX,MAAMwD,SACZ,kBAAC,EAAD,CACCJ,cAAiBzC,KAAK8C,aAGvB,kBAAC,EAAD,CACC/B,aAAgBf,KAAK8C,WACrBC,eAAkB/C,KAAKX,MAAMwD,gB,GAtBnB7B,IAAMC,WCPJ+B,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdpD,OAAM,SAAAC,GACLoD,QAAQpD,MAAMA,EAAMqD,c","file":"static/js/main.4eaf93bb.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst LoginSection = styled.section`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n   \n`\nconst LoginTitle = styled.h2`\n\n`\nconst LoginInput = styled.input`\n\n`\nconst LoginButton = styled.button`\n\n`\n\nclass Login extends React.Component{\n\n    state={\n        userName: '',\n        userEmail: '',\n    }\n\n    componentWillUnmount(){\n\n        const dataToSend = {name: this.state.userName, email: this.state.userEmail}\n        \n        axios.post('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users', dataToSend,{\n            headers: {\n            'Authorization':'osman-rodrigues-julian'\n            }\n        }).then((response) =>{\n            window.alert(`Usuário ${dataToSend.name} registado`)\n        }).catch((error)=>{\n            window.alert(`Erro no envio dos dados!\\n${error}`) \n        })\n    }\n\n    onChangeLoginInputUserName = (e) =>{\n        this.setState({userName: e.target.value})\n    }\n    onChangeLoginInputKey = (e) =>{\n        this.setState({userEmail: e.target.value}) \n    }\n\n    render(){\n    \n        return(\n            <LoginSection>\n                <LoginTitle>Login</LoginTitle>  \n\n                <LoginInput \n                onChange={this.onChangeLoginInputUserName}\n                value={this.state.userName}\n                placeholder={'Nome de Usuário'}\n                />\n                <LoginInput onChange={this.onChangeLoginInputKey}\n                value={this.state.userEmail}\n                placeholder={'Email'}\n                />\n\n                <LoginButton \n                onClick={this.props.onClickLogin}\n                >Registrar e Fazer Login\n                </LoginButton>\n            </LoginSection>\n        );\n    }\n}\n\nexport default Login;","import React from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst UsersViewSection = styled.section`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  \n`\nconst UsersViewTitle = styled.h2`\n\n`\nconst UserList = styled.ul`\n    list-style: none;\n    font-size: large;\n      \n`\nconst User = styled.li`\n\n`\nconst UserRemove = styled.span`\n    margin-left: 10px;\n    :hover{color: red};\n    }\n    font-size: small; \n`\nconst LogoffButton = styled.button`\n\n`\n\nclass UsersView extends React.Component{\n\n    state={\n        token: 'osman-rodrigues-julian',\n        usersList: [] \n    }\n\n    componentDidMount(){\n\n        axios.get('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users',{\n            headers:{\n                Authorization: this.state.token\n            }\n            }).then((response) =>{\n            window.alert(`Seja bem-vindo!`)\n            this.setState({ usersList: response.data })\n            }).catch((error)=>{\n                window.alert(`Erro na montagem do banco de usuários\\n${error}`) \n            })\n    }\n\n    onClickUserRemove=(e)=>{\n        const parentId = e.target.parentNode.id\n\n        axios.delete(`https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users/${parentId}`,{\n            headers:{\n                Authorization: this.state.token\n            }\n        }).then((response) =>{\n            axios.get('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users',{\n            headers:{\n                Authorization: this.state.token\n            }\n            }).then((response) =>{\n            this.setState({ usersList: response.data })\n            window.alert(`Usuario removido`)\n            }).catch((error)=>{\n                window.alert(`Erro na atualização da lista após remoção do usuário\\n${error}`) \n        })\n        }).catch((error)=>{\n            window.alert(`Erro na remoção do usuário\\n${error}`) \n        })   \n    }\n\n    render(){\n\n        return (\n            <UsersViewSection>\n                <UsersViewTitle>Lista de Usuários</UsersViewTitle>\n\n                <UserList>\n                    {this.state.usersList.map(user=>{\n                        return(\n                            <User\n                            key={user.id}\n                            id={user.id}\n                            >{user.name}\n                            <UserRemove id={user.id} onClick={this.onClickUserRemove}>remover</UserRemove>\n                            </User>\n                        )\n                    })}\n                </UserList>\n\n                <LogoffButton onClick={this.props.onClickLogoff}>Logoff</LogoffButton>\n\n            </UsersViewSection>\n        )\n    }\n}\n\nexport default UsersView;","import React from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport Login from './components/Login';\nimport UsersView from './components/UsersView';\n\nconst AppContainer = styled.main`\n  /* @import url('https://fonts.googleapis.com/css?family=Roboto&display=swap'); */\n  margin: 0;\n  width: 100vw;\n  height: 100vh;\n  /* font-family: 'Roboto', sans-serif; */\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  \n  \n`\n\nclass App extends React.Component{\n\n  state={\n    loggedIn: false,\n  }\n\n  onClickLog = () =>{\n    this.setState({ loggedIn: ! this.state.loggedIn })\n  }\n\n  render(){\n\n    return (\n      <AppContainer>\n        \n       {this.state.loggedIn ?\n       <UsersView\n        onClickLogoff = {this.onClickLog}\n        />\n       :\n       <Login \n        onClickLogin = {this.onClickLog}\n        dataFromParent = {this.state.loggedIn}\n        />\n      }\n\n      </AppContainer>\n    );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}