{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","titulo","reproduzVideo","alert","type","placeholder","id","className","onClick","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOA6EeA,MA1Ef,WACE,IAAMC,EAAS,wBAEf,SAASC,IACPC,MAAM,wCAKR,OACE,6BACE,gCACI,wCACA,2BAAOC,KAAK,OAAOC,YAAY,WAAWC,GAAG,iBAC7C,yBAAKC,UAAU,kBAAkBC,QARzC,WACEL,MAAM,kDAQCM,IAAI,wGAAwGC,IAAI,MAIrH,8BACI,yBAAKH,UAAU,iBACX,4BACI,wBAAIA,UAAU,yBAAd,aACA,wBAAIA,UAAU,yBAAd,WACA,wBAAIA,UAAU,yBAAd,oBACA,6BACA,wBAAIA,UAAU,yBAAd,aACA,wBAAIA,UAAU,yBAAd,kBAIR,6BAASA,UAAU,oBACf,yBAAKA,UAAU,8BAA8BC,QAASN,GAClD,yBAAKO,IAAI,qCAAqCC,IAAI,KAClD,4BAAKT,IAET,yBAAKM,UAAU,8BAA8BC,QAASN,GAClD,yBAAKO,IAAI,qCAAqCC,IAAI,KAClD,4BAAKT,IAET,yBAAKM,UAAU,8BAA8BC,QAASN,GAClD,yBAAKO,IAAI,qCAAqCC,IAAI,KAClD,4BAAKT,IAET,yBAAKM,UAAU,8BAA8BC,QAASN,GAClD,yBAAKO,IAAI,qCAAqCC,IAAI,KAClD,4BAAKT,IAET,yBAAKM,UAAU,8BAA8BC,QAASN,GAClD,yBAAKO,IAAI,qCAAqCC,IAAI,KAClD,4BAAKT,IAET,yBAAKM,UAAU,8BAA8BC,QAASN,GAClD,yBAAKO,IAAI,qCAAqCC,IAAI,KAClD,4BAAKT,IAET,yBAAKM,UAAU,8BAA8BC,QAASN,GAClD,yBAAKO,IAAI,qCAAqCC,IAAI,KAClD,4BAAKT,IAET,yBAAKM,UAAU,8BAA8BC,QAASN,GAClD,yBAAKO,IAAI,qCAAqCC,IAAI,KAClD,4BAAKT,MAKjB,gCACI,yDC3DUU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e5c946dd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  const titulo = 'Título do Vídeo';\n\n  function reproduzVideo(){\n    alert(\"O vídeo está sendo reproduzido\")\n  }\n  function criarVideo(){\n    alert(\"Redirecionando para criação de vídeo\")\n  }\n  return (\n    <div>\n      <header>\n          <h1>Lab Tube</h1>\n          <input type=\"text\" placeholder=\"Pequisar\" id=\"campoDeBusca\" />\n          <img className=\"icone-navegacao\" onClick={criarVideo}\n           src=\"https://cdn0.iconfinder.com/data/icons/interaction-7/70/video__filmstrip__edit__create__media-512.png\" alt=\"\"/>\n          \n      </header>\n\n      <main>\n          <nav className=\"menu-vertical\">\n              <ul>\n                  <li className=\"botoes-meunu-vertical\">Início</li>\n                  <li className=\"botoes-meunu-vertical\">Em alta</li>\n                  <li className=\"botoes-meunu-vertical\">Inscrições</li>\n                  <hr />\n                  <li className=\"botoes-meunu-vertical\">Originais</li>\n                  <li className=\"botoes-meunu-vertical\">Histórico</li>\n              </ul>\n          </nav>\n          \n          <section className=\"painel-de-videos\">\n              <div className=\"box-pagina-principal media1\" onClick={reproduzVideo}>\n                  <img src=\"https://picsum.photos/400/400?a=1 \" alt=\"\" />\n                  <h4>{titulo}</h4>\n              </div>\n              <div className=\"box-pagina-principal media2\" onClick={reproduzVideo}>\n                  <img src=\"https://picsum.photos/400/400?a=2 \" alt=\"\" />\n                  <h4>{titulo}</h4>\n              </div>\n              <div className=\"box-pagina-principal media3\" onClick={reproduzVideo}>\n                  <img src=\"https://picsum.photos/400/400?a=3 \" alt=\"\" />\n                  <h4>{titulo}</h4>\n              </div>\n              <div className=\"box-pagina-principal media4\" onClick={reproduzVideo}>\n                  <img src=\"https://picsum.photos/400/400?a=4 \" alt=\"\" />\n                  <h4>{titulo}</h4>\n              </div>\n              <div className=\"box-pagina-principal media5\" onClick={reproduzVideo}>\n                  <img src=\"https://picsum.photos/400/400?a=5 \" alt=\"\" />\n                  <h4>{titulo}</h4>\n              </div>\n              <div className=\"box-pagina-principal media6\" onClick={reproduzVideo}>\n                  <img src=\"https://picsum.photos/400/400?a=6 \" alt=\"\" />\n                  <h4>{titulo}</h4>\n              </div>\n              <div className=\"box-pagina-principal media7\" onClick={reproduzVideo}>\n                  <img src=\"https://picsum.photos/400/400?a=7 \" alt=\"\" />\n                  <h4>{titulo}</h4>\n              </div>\n              <div className=\"box-pagina-principal media8\" onClick={reproduzVideo}>\n                  <img src=\"https://picsum.photos/400/400?a=8 \" alt=\"\" />\n                  <h4>{titulo}</h4>\n              </div>\n          </section>\n      </main>\n\n      <footer>\n          <h4>Oi! Eu moro no footer!</h4>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}